/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.06.1357
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Provisioning.Client;
using Genesys.Internal.Provisioning.Model;

namespace Genesys.Internal.Provisioning.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a user.
        /// </summary>
        /// <remarks>
        /// Create a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AddUser (AddUserData body);

        /// <summary>
        /// Create a user.
        /// </summary>
        /// <remarks>
        /// Create a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AddUserWithHttpInfo (AddUserData body);
        /// <summary>
        /// Remove a user.
        /// </summary>
        /// <remarks>
        /// Remove the specified user, along with their associated login, places, and DNs. This removes the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object and any associated [CfgAgentLogin](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgAgentLogin), [CfgPlace](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPlace), [CfgDN](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgDN) objects.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The users&#39; DBID.</param>
        /// <param name="keepPlaces">If &#x60;true&#x60; or absent, the user&#39;s places and DNs are not deleted.  (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteUser (string dbid, string keepPlaces = null);

        /// <summary>
        /// Remove a user.
        /// </summary>
        /// <remarks>
        /// Remove the specified user, along with their associated login, places, and DNs. This removes the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object and any associated [CfgAgentLogin](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgAgentLogin), [CfgPlace](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPlace), [CfgDN](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgDN) objects.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The users&#39; DBID.</param>
        /// <param name="keepPlaces">If &#x60;true&#x60; or absent, the user&#39;s places and DNs are not deleted.  (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteUserWithHttpInfo (string dbid, string keepPlaces = null);
        /// <summary>
        /// Get the logged in user.
        /// </summary>
        /// <remarks>
        /// Get the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object for the currently logged in user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUsersSuccessResponse</returns>
        GetUsersSuccessResponse GetCurrentUser ();

        /// <summary>
        /// Get the logged in user.
        /// </summary>
        /// <remarks>
        /// Get the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object for the currently logged in user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        ApiResponse<GetUsersSuccessResponse> GetCurrentUserWithHttpInfo ();
        /// <summary>
        /// Get a user.
        /// </summary>
        /// <remarks>
        /// Get the specified [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <returns>GetUsersSuccessResponse</returns>
        GetUsersSuccessResponse GetUser (string dbid);

        /// <summary>
        /// Get a user.
        /// </summary>
        /// <remarks>
        /// Get the specified [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        ApiResponse<GetUsersSuccessResponse> GetUserWithHttpInfo (string dbid);
        /// <summary>
        /// Get users.
        /// </summary>
        /// <remarks>
        /// Get [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) objects based on the specified filters.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of users the Provisioning API should return. (optional)</param>
        /// <param name="offset">The number of matches the Provisioning API should skip in the returned users. (optional)</param>
        /// <param name="order">The sort order. (optional)</param>
        /// <param name="sortBy">A comma-separated list of fields to sort on. Possible values are firstName, lastName, and userName.  (optional)</param>
        /// <param name="filterName">The name of a filter to use on the results. (optional)</param>
        /// <param name="filterParameters">A part of the users first or last name, if you use the FirstNameOrLastNameMatches filter.  (optional)</param>
        /// <param name="roles">Return only users who have the Workspace Web Edition roles. The roles can be specified in a comma-separated list. Possible values are ROLE_AGENT and ROLE_ADMIN,ROLE_SUPERVISOR.  (optional)</param>
        /// <param name="skills">Return only users who have these skills. The skills can be specified in a comma-separated list.  (optional)</param>
        /// <param name="userEnabled">Return only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Return only valid or invalid users. (optional)</param>
        /// <returns>GetUsersSuccessResponse</returns>
        GetUsersSuccessResponse GetUsers (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);

        /// <summary>
        /// Get users.
        /// </summary>
        /// <remarks>
        /// Get [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) objects based on the specified filters.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of users the Provisioning API should return. (optional)</param>
        /// <param name="offset">The number of matches the Provisioning API should skip in the returned users. (optional)</param>
        /// <param name="order">The sort order. (optional)</param>
        /// <param name="sortBy">A comma-separated list of fields to sort on. Possible values are firstName, lastName, and userName.  (optional)</param>
        /// <param name="filterName">The name of a filter to use on the results. (optional)</param>
        /// <param name="filterParameters">A part of the users first or last name, if you use the FirstNameOrLastNameMatches filter.  (optional)</param>
        /// <param name="roles">Return only users who have the Workspace Web Edition roles. The roles can be specified in a comma-separated list. Possible values are ROLE_AGENT and ROLE_ADMIN,ROLE_SUPERVISOR.  (optional)</param>
        /// <param name="skills">Return only users who have these skills. The skills can be specified in a comma-separated list.  (optional)</param>
        /// <param name="userEnabled">Return only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Return only valid or invalid users. (optional)</param>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        ApiResponse<GetUsersSuccessResponse> GetUsersWithHttpInfo (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);
        /// <summary>
        /// Update a user.
        /// </summary>
        /// <remarks>
        /// Update a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse UpdateUser (string dbid, UpdateUserData updateUserData);

        /// <summary>
        /// Update a user.
        /// </summary>
        /// <remarks>
        /// Update a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> UpdateUserWithHttpInfo (string dbid, UpdateUserData updateUserData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a user.
        /// </summary>
        /// <remarks>
        /// Create a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AddUserAsync (AddUserData body);

        /// <summary>
        /// Create a user.
        /// </summary>
        /// <remarks>
        /// Create a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddUserAsyncWithHttpInfo (AddUserData body);
        /// <summary>
        /// Remove a user.
        /// </summary>
        /// <remarks>
        /// Remove the specified user, along with their associated login, places, and DNs. This removes the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object and any associated [CfgAgentLogin](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgAgentLogin), [CfgPlace](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPlace), [CfgDN](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgDN) objects.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The users&#39; DBID.</param>
        /// <param name="keepPlaces">If &#x60;true&#x60; or absent, the user&#39;s places and DNs are not deleted.  (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserAsync (string dbid, string keepPlaces = null);

        /// <summary>
        /// Remove a user.
        /// </summary>
        /// <remarks>
        /// Remove the specified user, along with their associated login, places, and DNs. This removes the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object and any associated [CfgAgentLogin](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgAgentLogin), [CfgPlace](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPlace), [CfgDN](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgDN) objects.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The users&#39; DBID.</param>
        /// <param name="keepPlaces">If &#x60;true&#x60; or absent, the user&#39;s places and DNs are not deleted.  (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserAsyncWithHttpInfo (string dbid, string keepPlaces = null);
        /// <summary>
        /// Get the logged in user.
        /// </summary>
        /// <remarks>
        /// Get the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object for the currently logged in user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        System.Threading.Tasks.Task<GetUsersSuccessResponse> GetCurrentUserAsync ();

        /// <summary>
        /// Get the logged in user.
        /// </summary>
        /// <remarks>
        /// Get the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object for the currently logged in user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetCurrentUserAsyncWithHttpInfo ();
        /// <summary>
        /// Get a user.
        /// </summary>
        /// <remarks>
        /// Get the specified [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        System.Threading.Tasks.Task<GetUsersSuccessResponse> GetUserAsync (string dbid);

        /// <summary>
        /// Get a user.
        /// </summary>
        /// <remarks>
        /// Get the specified [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetUserAsyncWithHttpInfo (string dbid);
        /// <summary>
        /// Get users.
        /// </summary>
        /// <remarks>
        /// Get [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) objects based on the specified filters.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of users the Provisioning API should return. (optional)</param>
        /// <param name="offset">The number of matches the Provisioning API should skip in the returned users. (optional)</param>
        /// <param name="order">The sort order. (optional)</param>
        /// <param name="sortBy">A comma-separated list of fields to sort on. Possible values are firstName, lastName, and userName.  (optional)</param>
        /// <param name="filterName">The name of a filter to use on the results. (optional)</param>
        /// <param name="filterParameters">A part of the users first or last name, if you use the FirstNameOrLastNameMatches filter.  (optional)</param>
        /// <param name="roles">Return only users who have the Workspace Web Edition roles. The roles can be specified in a comma-separated list. Possible values are ROLE_AGENT and ROLE_ADMIN,ROLE_SUPERVISOR.  (optional)</param>
        /// <param name="skills">Return only users who have these skills. The skills can be specified in a comma-separated list.  (optional)</param>
        /// <param name="userEnabled">Return only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Return only valid or invalid users. (optional)</param>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        System.Threading.Tasks.Task<GetUsersSuccessResponse> GetUsersAsync (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);

        /// <summary>
        /// Get users.
        /// </summary>
        /// <remarks>
        /// Get [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) objects based on the specified filters.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of users the Provisioning API should return. (optional)</param>
        /// <param name="offset">The number of matches the Provisioning API should skip in the returned users. (optional)</param>
        /// <param name="order">The sort order. (optional)</param>
        /// <param name="sortBy">A comma-separated list of fields to sort on. Possible values are firstName, lastName, and userName.  (optional)</param>
        /// <param name="filterName">The name of a filter to use on the results. (optional)</param>
        /// <param name="filterParameters">A part of the users first or last name, if you use the FirstNameOrLastNameMatches filter.  (optional)</param>
        /// <param name="roles">Return only users who have the Workspace Web Edition roles. The roles can be specified in a comma-separated list. Possible values are ROLE_AGENT and ROLE_ADMIN,ROLE_SUPERVISOR.  (optional)</param>
        /// <param name="skills">Return only users who have these skills. The skills can be specified in a comma-separated list.  (optional)</param>
        /// <param name="userEnabled">Return only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Return only valid or invalid users. (optional)</param>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetUsersAsyncWithHttpInfo (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);
        /// <summary>
        /// Update a user.
        /// </summary>
        /// <remarks>
        /// Update a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> UpdateUserAsync (string dbid, UpdateUserData updateUserData);

        /// <summary>
        /// Update a user.
        /// </summary>
        /// <remarks>
        /// Update a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateUserAsyncWithHttpInfo (string dbid, UpdateUserData updateUserData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Genesys.Internal.Provisioning.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Provisioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Provisioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Provisioning.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a user. Create a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AddUser (AddUserData body)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AddUserWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user. Create a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AddUserWithHttpInfo (AddUserData body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create a user. Create a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AddUserAsync (AddUserData body)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AddUserAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user. Create a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddUserAsyncWithHttpInfo (AddUserData body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove a user. Remove the specified user, along with their associated login, places, and DNs. This removes the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object and any associated [CfgAgentLogin](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgAgentLogin), [CfgPlace](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPlace), [CfgDN](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgDN) objects.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The users&#39; DBID.</param>
        /// <param name="keepPlaces">If &#x60;true&#x60; or absent, the user&#39;s places and DNs are not deleted.  (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteUser (string dbid, string keepPlaces = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteUserWithHttpInfo(dbid, keepPlaces);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a user. Remove the specified user, along with their associated login, places, and DNs. This removes the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object and any associated [CfgAgentLogin](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgAgentLogin), [CfgPlace](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPlace), [CfgDN](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgDN) objects.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The users&#39; DBID.</param>
        /// <param name="keepPlaces">If &#x60;true&#x60; or absent, the user&#39;s places and DNs are not deleted.  (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteUserWithHttpInfo (string dbid, string keepPlaces = null)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (keepPlaces != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "keep_places", keepPlaces)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove a user. Remove the specified user, along with their associated login, places, and DNs. This removes the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object and any associated [CfgAgentLogin](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgAgentLogin), [CfgPlace](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPlace), [CfgDN](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgDN) objects.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The users&#39; DBID.</param>
        /// <param name="keepPlaces">If &#x60;true&#x60; or absent, the user&#39;s places and DNs are not deleted.  (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserAsync (string dbid, string keepPlaces = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteUserAsyncWithHttpInfo(dbid, keepPlaces);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a user. Remove the specified user, along with their associated login, places, and DNs. This removes the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object and any associated [CfgAgentLogin](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgAgentLogin), [CfgPlace](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPlace), [CfgDN](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgDN) objects.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The users&#39; DBID.</param>
        /// <param name="keepPlaces">If &#x60;true&#x60; or absent, the user&#39;s places and DNs are not deleted.  (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserAsyncWithHttpInfo (string dbid, string keepPlaces = null)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (keepPlaces != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "keep_places", keepPlaces)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the logged in user. Get the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object for the currently logged in user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUsersSuccessResponse</returns>
        public GetUsersSuccessResponse GetCurrentUser ()
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = GetCurrentUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the logged in user. Get the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object for the currently logged in user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        public ApiResponse< GetUsersSuccessResponse > GetCurrentUserWithHttpInfo ()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get the logged in user. Get the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object for the currently logged in user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersSuccessResponse> GetCurrentUserAsync ()
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = await GetCurrentUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the logged in user. Get the [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object for the currently logged in user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetCurrentUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get a user. Get the specified [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <returns>GetUsersSuccessResponse</returns>
        public GetUsersSuccessResponse GetUser (string dbid)
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = GetUserWithHttpInfo(dbid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user. Get the specified [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        public ApiResponse< GetUsersSuccessResponse > GetUserWithHttpInfo (string dbid)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->GetUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get a user. Get the specified [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersSuccessResponse> GetUserAsync (string dbid)
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = await GetUserAsyncWithHttpInfo(dbid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user. Get the specified [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) object.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetUserAsyncWithHttpInfo (string dbid)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->GetUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get users. Get [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) objects based on the specified filters.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of users the Provisioning API should return. (optional)</param>
        /// <param name="offset">The number of matches the Provisioning API should skip in the returned users. (optional)</param>
        /// <param name="order">The sort order. (optional)</param>
        /// <param name="sortBy">A comma-separated list of fields to sort on. Possible values are firstName, lastName, and userName.  (optional)</param>
        /// <param name="filterName">The name of a filter to use on the results. (optional)</param>
        /// <param name="filterParameters">A part of the users first or last name, if you use the FirstNameOrLastNameMatches filter.  (optional)</param>
        /// <param name="roles">Return only users who have the Workspace Web Edition roles. The roles can be specified in a comma-separated list. Possible values are ROLE_AGENT and ROLE_ADMIN,ROLE_SUPERVISOR.  (optional)</param>
        /// <param name="skills">Return only users who have these skills. The skills can be specified in a comma-separated list.  (optional)</param>
        /// <param name="userEnabled">Return only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Return only valid or invalid users. (optional)</param>
        /// <returns>GetUsersSuccessResponse</returns>
        public GetUsersSuccessResponse GetUsers (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = GetUsersWithHttpInfo(limit, offset, order, sortBy, filterName, filterParameters, roles, skills, userEnabled, userValid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users. Get [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) objects based on the specified filters.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of users the Provisioning API should return. (optional)</param>
        /// <param name="offset">The number of matches the Provisioning API should skip in the returned users. (optional)</param>
        /// <param name="order">The sort order. (optional)</param>
        /// <param name="sortBy">A comma-separated list of fields to sort on. Possible values are firstName, lastName, and userName.  (optional)</param>
        /// <param name="filterName">The name of a filter to use on the results. (optional)</param>
        /// <param name="filterParameters">A part of the users first or last name, if you use the FirstNameOrLastNameMatches filter.  (optional)</param>
        /// <param name="roles">Return only users who have the Workspace Web Edition roles. The roles can be specified in a comma-separated list. Possible values are ROLE_AGENT and ROLE_ADMIN,ROLE_SUPERVISOR.  (optional)</param>
        /// <param name="skills">Return only users who have these skills. The skills can be specified in a comma-separated list.  (optional)</param>
        /// <param name="userEnabled">Return only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Return only valid or invalid users. (optional)</param>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        public ApiResponse< GetUsersSuccessResponse > GetUsersWithHttpInfo (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filterName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterName", filterName)); // query parameter
            if (filterParameters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterParameters", filterParameters)); // query parameter
            if (roles != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "roles", roles)); // query parameter
            if (skills != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "skills", skills)); // query parameter
            if (userEnabled != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userEnabled", userEnabled)); // query parameter
            if (userValid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userValid", userValid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get users. Get [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) objects based on the specified filters.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of users the Provisioning API should return. (optional)</param>
        /// <param name="offset">The number of matches the Provisioning API should skip in the returned users. (optional)</param>
        /// <param name="order">The sort order. (optional)</param>
        /// <param name="sortBy">A comma-separated list of fields to sort on. Possible values are firstName, lastName, and userName.  (optional)</param>
        /// <param name="filterName">The name of a filter to use on the results. (optional)</param>
        /// <param name="filterParameters">A part of the users first or last name, if you use the FirstNameOrLastNameMatches filter.  (optional)</param>
        /// <param name="roles">Return only users who have the Workspace Web Edition roles. The roles can be specified in a comma-separated list. Possible values are ROLE_AGENT and ROLE_ADMIN,ROLE_SUPERVISOR.  (optional)</param>
        /// <param name="skills">Return only users who have these skills. The skills can be specified in a comma-separated list.  (optional)</param>
        /// <param name="userEnabled">Return only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Return only valid or invalid users. (optional)</param>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersSuccessResponse> GetUsersAsync (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = await GetUsersAsyncWithHttpInfo(limit, offset, order, sortBy, filterName, filterParameters, roles, skills, userEnabled, userValid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users. Get [CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson) objects based on the specified filters.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of users the Provisioning API should return. (optional)</param>
        /// <param name="offset">The number of matches the Provisioning API should skip in the returned users. (optional)</param>
        /// <param name="order">The sort order. (optional)</param>
        /// <param name="sortBy">A comma-separated list of fields to sort on. Possible values are firstName, lastName, and userName.  (optional)</param>
        /// <param name="filterName">The name of a filter to use on the results. (optional)</param>
        /// <param name="filterParameters">A part of the users first or last name, if you use the FirstNameOrLastNameMatches filter.  (optional)</param>
        /// <param name="roles">Return only users who have the Workspace Web Edition roles. The roles can be specified in a comma-separated list. Possible values are ROLE_AGENT and ROLE_ADMIN,ROLE_SUPERVISOR.  (optional)</param>
        /// <param name="skills">Return only users who have these skills. The skills can be specified in a comma-separated list.  (optional)</param>
        /// <param name="userEnabled">Return only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Return only valid or invalid users. (optional)</param>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetUsersAsyncWithHttpInfo (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filterName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterName", filterName)); // query parameter
            if (filterParameters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterParameters", filterParameters)); // query parameter
            if (roles != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "roles", roles)); // query parameter
            if (skills != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "skills", skills)); // query parameter
            if (userEnabled != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userEnabled", userEnabled)); // query parameter
            if (userValid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userValid", userValid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Update a user. Update a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse UpdateUser (string dbid, UpdateUserData updateUserData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = UpdateUserWithHttpInfo(dbid, updateUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user. Update a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > UpdateUserWithHttpInfo (string dbid, UpdateUserData updateUserData)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UpdateUser");
            // verify the required parameter 'updateUserData' is set
            if (updateUserData == null)
                throw new ApiException(400, "Missing required parameter 'updateUserData' when calling UsersApi->UpdateUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (updateUserData != null && updateUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update a user. Update a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> UpdateUserAsync (string dbid, UpdateUserData updateUserData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await UpdateUserAsyncWithHttpInfo(dbid, updateUserData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user. Update a user ([CfgPerson](https://docs.genesys.com/Documentation/PSDK/latest/ConfigLayerRef/CfgPerson)) with the specified attributes.
        /// </summary>
        /// <exception cref="Genesys.Internal.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">The user&#39;s DBID.</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateUserAsyncWithHttpInfo (string dbid, UpdateUserData updateUserData)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UpdateUser");
            // verify the required parameter 'updateUserData' is set
            if (updateUserData == null)
                throw new ApiException(400, "Missing required parameter 'updateUserData' when calling UsersApi->UpdateUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (updateUserData != null && updateUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
