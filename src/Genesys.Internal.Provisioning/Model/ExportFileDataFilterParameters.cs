/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.18.2300
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Provisioning.Client.SwaggerDateConverter;

namespace Genesys.Internal.Provisioning.Model
{
    /// <summary>
    /// A map containing parameters to filter and sort users. Only users that match the filter are exported. 
    /// </summary>
    [DataContract]
    public partial class ExportFileDataFilterParameters :  IEquatable<ExportFileDataFilterParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportFileDataFilterParameters" /> class.
        /// </summary>
        /// <param name="AgentGroupFilter">An array of agent group names in which the user is included..</param>
        /// <param name="Order">The sort order, either Ascending or Descending..</param>
        /// <param name="SortBy">A comma-separated list of fields used to sort the exported users..</param>
        /// <param name="Subresources">A comma-separated list of subresources (for example, skills) to include in the export. (default to &quot;skills,devices&quot;).</param>
        public ExportFileDataFilterParameters(List<string> AgentGroupFilter = default(List<string>), string Order = default(string), List<string> SortBy = default(List<string>), string Subresources = "skills,devices")
        {
            this.AgentGroupFilter = AgentGroupFilter;
            this.Order = Order;
            this.SortBy = SortBy;
            // use default value if no "Subresources" provided
            if (Subresources == null)
            {
                this.Subresources = "skills,devices";
            }
            else
            {
                this.Subresources = Subresources;
            }
        }
        
        /// <summary>
        /// An array of agent group names in which the user is included.
        /// </summary>
        /// <value>An array of agent group names in which the user is included.</value>
        [DataMember(Name="agentGroupFilter", EmitDefaultValue=false)]
        public List<string> AgentGroupFilter { get; set; }

        /// <summary>
        /// The sort order, either Ascending or Descending.
        /// </summary>
        /// <value>The sort order, either Ascending or Descending.</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }

        /// <summary>
        /// A comma-separated list of fields used to sort the exported users.
        /// </summary>
        /// <value>A comma-separated list of fields used to sort the exported users.</value>
        [DataMember(Name="sortBy", EmitDefaultValue=false)]
        public List<string> SortBy { get; set; }

        /// <summary>
        /// A comma-separated list of subresources (for example, skills) to include in the export.
        /// </summary>
        /// <value>A comma-separated list of subresources (for example, skills) to include in the export.</value>
        [DataMember(Name="subresources", EmitDefaultValue=false)]
        public string Subresources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportFileDataFilterParameters {\n");
            sb.Append("  AgentGroupFilter: ").Append(AgentGroupFilter).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  Subresources: ").Append(Subresources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExportFileDataFilterParameters);
        }

        /// <summary>
        /// Returns true if ExportFileDataFilterParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of ExportFileDataFilterParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportFileDataFilterParameters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AgentGroupFilter == other.AgentGroupFilter ||
                    this.AgentGroupFilter != null &&
                    this.AgentGroupFilter.SequenceEqual(other.AgentGroupFilter)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.SortBy == other.SortBy ||
                    this.SortBy != null &&
                    this.SortBy.SequenceEqual(other.SortBy)
                ) && 
                (
                    this.Subresources == other.Subresources ||
                    this.Subresources != null &&
                    this.Subresources.Equals(other.Subresources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AgentGroupFilter != null)
                    hash = hash * 59 + this.AgentGroupFilter.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.SortBy != null)
                    hash = hash * 59 + this.SortBy.GetHashCode();
                if (this.Subresources != null)
                    hash = hash * 59 + this.Subresources.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
