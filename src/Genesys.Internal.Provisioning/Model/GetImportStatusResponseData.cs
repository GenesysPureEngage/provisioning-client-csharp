/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.08.1664
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Provisioning.Client.SwaggerDateConverter;

namespace Genesys.Internal.Provisioning.Model
{
    /// <summary>
    /// GetImportStatusResponseData
    /// </summary>
    [DataContract]
    public partial class GetImportStatusResponseData :  IEquatable<GetImportStatusResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetImportStatusResponseData" /> class.
        /// </summary>
        /// <param name="ActiveImporters">The IDs (usernames) of all administrators currently running a bulk import..</param>
        /// <param name="AdminName">The login name of an administrator for the tenant..</param>
        /// <param name="Failed">An array of errors that occurred during the import..</param>
        /// <param name="LastEntity">The name of the last object processed..</param>
        /// <param name="Operation">The name of the current operation..</param>
        /// <param name="SheetName">The name of the sheet currently being processed in the CSV/XLS file..</param>
        /// <param name="StopRequested">This value is set to &#x60;true&#x60; if the user pressed **Stop Import**..</param>
        /// <param name="Stopped">This value is set to &#x60;true&#x60; if the import is stopped..</param>
        /// <param name="SucceedCount">The number of successfully processed records..</param>
        /// <param name="TotalCount">The total number of processed records..</param>
        public GetImportStatusResponseData(List<string> ActiveImporters = default(List<string>), string AdminName = default(string), List<string> Failed = default(List<string>), string LastEntity = default(string), string Operation = default(string), string SheetName = default(string), bool? StopRequested = default(bool?), bool? Stopped = default(bool?), decimal? SucceedCount = default(decimal?), decimal? TotalCount = default(decimal?))
        {
            this.ActiveImporters = ActiveImporters;
            this.AdminName = AdminName;
            this.Failed = Failed;
            this.LastEntity = LastEntity;
            this.Operation = Operation;
            this.SheetName = SheetName;
            this.StopRequested = StopRequested;
            this.Stopped = Stopped;
            this.SucceedCount = SucceedCount;
            this.TotalCount = TotalCount;
        }
        
        /// <summary>
        /// The IDs (usernames) of all administrators currently running a bulk import.
        /// </summary>
        /// <value>The IDs (usernames) of all administrators currently running a bulk import.</value>
        [DataMember(Name="activeImporters", EmitDefaultValue=false)]
        public List<string> ActiveImporters { get; set; }

        /// <summary>
        /// The login name of an administrator for the tenant.
        /// </summary>
        /// <value>The login name of an administrator for the tenant.</value>
        [DataMember(Name="adminName", EmitDefaultValue=false)]
        public string AdminName { get; set; }

        /// <summary>
        /// An array of errors that occurred during the import.
        /// </summary>
        /// <value>An array of errors that occurred during the import.</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public List<string> Failed { get; set; }

        /// <summary>
        /// The name of the last object processed.
        /// </summary>
        /// <value>The name of the last object processed.</value>
        [DataMember(Name="lastEntity", EmitDefaultValue=false)]
        public string LastEntity { get; set; }

        /// <summary>
        /// The name of the current operation.
        /// </summary>
        /// <value>The name of the current operation.</value>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public string Operation { get; set; }

        /// <summary>
        /// The name of the sheet currently being processed in the CSV/XLS file.
        /// </summary>
        /// <value>The name of the sheet currently being processed in the CSV/XLS file.</value>
        [DataMember(Name="sheetName", EmitDefaultValue=false)]
        public string SheetName { get; set; }

        /// <summary>
        /// This value is set to &#x60;true&#x60; if the user pressed **Stop Import**.
        /// </summary>
        /// <value>This value is set to &#x60;true&#x60; if the user pressed **Stop Import**.</value>
        [DataMember(Name="stopRequested", EmitDefaultValue=false)]
        public bool? StopRequested { get; set; }

        /// <summary>
        /// This value is set to &#x60;true&#x60; if the import is stopped.
        /// </summary>
        /// <value>This value is set to &#x60;true&#x60; if the import is stopped.</value>
        [DataMember(Name="stopped", EmitDefaultValue=false)]
        public bool? Stopped { get; set; }

        /// <summary>
        /// The number of successfully processed records.
        /// </summary>
        /// <value>The number of successfully processed records.</value>
        [DataMember(Name="succeedCount", EmitDefaultValue=false)]
        public decimal? SucceedCount { get; set; }

        /// <summary>
        /// The total number of processed records.
        /// </summary>
        /// <value>The total number of processed records.</value>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public decimal? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetImportStatusResponseData {\n");
            sb.Append("  ActiveImporters: ").Append(ActiveImporters).Append("\n");
            sb.Append("  AdminName: ").Append(AdminName).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  LastEntity: ").Append(LastEntity).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  SheetName: ").Append(SheetName).Append("\n");
            sb.Append("  StopRequested: ").Append(StopRequested).Append("\n");
            sb.Append("  Stopped: ").Append(Stopped).Append("\n");
            sb.Append("  SucceedCount: ").Append(SucceedCount).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetImportStatusResponseData);
        }

        /// <summary>
        /// Returns true if GetImportStatusResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of GetImportStatusResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetImportStatusResponseData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveImporters == input.ActiveImporters ||
                    this.ActiveImporters != null &&
                    this.ActiveImporters.SequenceEqual(input.ActiveImporters)
                ) && 
                (
                    this.AdminName == input.AdminName ||
                    (this.AdminName != null &&
                    this.AdminName.Equals(input.AdminName))
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed != null &&
                    this.Failed.SequenceEqual(input.Failed)
                ) && 
                (
                    this.LastEntity == input.LastEntity ||
                    (this.LastEntity != null &&
                    this.LastEntity.Equals(input.LastEntity))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.SheetName == input.SheetName ||
                    (this.SheetName != null &&
                    this.SheetName.Equals(input.SheetName))
                ) && 
                (
                    this.StopRequested == input.StopRequested ||
                    (this.StopRequested != null &&
                    this.StopRequested.Equals(input.StopRequested))
                ) && 
                (
                    this.Stopped == input.Stopped ||
                    (this.Stopped != null &&
                    this.Stopped.Equals(input.Stopped))
                ) && 
                (
                    this.SucceedCount == input.SucceedCount ||
                    (this.SucceedCount != null &&
                    this.SucceedCount.Equals(input.SucceedCount))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveImporters != null)
                    hashCode = hashCode * 59 + this.ActiveImporters.GetHashCode();
                if (this.AdminName != null)
                    hashCode = hashCode * 59 + this.AdminName.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.LastEntity != null)
                    hashCode = hashCode * 59 + this.LastEntity.GetHashCode();
                if (this.Operation != null)
                    hashCode = hashCode * 59 + this.Operation.GetHashCode();
                if (this.SheetName != null)
                    hashCode = hashCode * 59 + this.SheetName.GetHashCode();
                if (this.StopRequested != null)
                    hashCode = hashCode * 59 + this.StopRequested.GetHashCode();
                if (this.Stopped != null)
                    hashCode = hashCode * 59 + this.Stopped.GetHashCode();
                if (this.SucceedCount != null)
                    hashCode = hashCode * 59 + this.SucceedCount.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
