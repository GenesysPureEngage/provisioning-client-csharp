/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.26.2572
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Provisioning.Client.SwaggerDateConverter;

namespace Genesys.Internal.Provisioning.Model
{
    /// <summary>
    /// InboundData
    /// </summary>
    [DataContract]
    public partial class InboundData :  IEquatable<InboundData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundData" /> class.
        /// </summary>
        /// <param name="Name">Name of an inbound client  (required).</param>
        /// <param name="MaxMessageSize">MaxMessageSize.</param>
        /// <param name="Mailbox">Mailbox.</param>
        /// <param name="Password">Password.</param>
        /// <param name="Host">Host.</param>
        /// <param name="Port">Port.</param>
        /// <param name="ConnectionSecurity">ConnectionSecurity.</param>
        /// <param name="Type">POP3 or IMAP .</param>
        public InboundData(string Name = default(string), int? MaxMessageSize = default(int?), string Mailbox = default(string), string Password = default(string), string Host = default(string), int? Port = default(int?), string ConnectionSecurity = default(string), string Type = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for InboundData and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.MaxMessageSize = MaxMessageSize;
            this.Mailbox = Mailbox;
            this.Password = Password;
            this.Host = Host;
            this.Port = Port;
            this.ConnectionSecurity = ConnectionSecurity;
            this.Type = Type;
        }
        
        /// <summary>
        /// Name of an inbound client 
        /// </summary>
        /// <value>Name of an inbound client </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MaxMessageSize
        /// </summary>
        [DataMember(Name="maxMessageSize", EmitDefaultValue=false)]
        public int? MaxMessageSize { get; set; }

        /// <summary>
        /// Gets or Sets Mailbox
        /// </summary>
        [DataMember(Name="mailbox", EmitDefaultValue=false)]
        public string Mailbox { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionSecurity
        /// </summary>
        [DataMember(Name="connectionSecurity", EmitDefaultValue=false)]
        public string ConnectionSecurity { get; set; }

        /// <summary>
        /// POP3 or IMAP 
        /// </summary>
        /// <value>POP3 or IMAP </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MaxMessageSize: ").Append(MaxMessageSize).Append("\n");
            sb.Append("  Mailbox: ").Append(Mailbox).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ConnectionSecurity: ").Append(ConnectionSecurity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundData);
        }

        /// <summary>
        /// Returns true if InboundData instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MaxMessageSize == input.MaxMessageSize ||
                    (this.MaxMessageSize != null &&
                    this.MaxMessageSize.Equals(input.MaxMessageSize))
                ) && 
                (
                    this.Mailbox == input.Mailbox ||
                    (this.Mailbox != null &&
                    this.Mailbox.Equals(input.Mailbox))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.ConnectionSecurity == input.ConnectionSecurity ||
                    (this.ConnectionSecurity != null &&
                    this.ConnectionSecurity.Equals(input.ConnectionSecurity))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MaxMessageSize != null)
                    hashCode = hashCode * 59 + this.MaxMessageSize.GetHashCode();
                if (this.Mailbox != null)
                    hashCode = hashCode * 59 + this.Mailbox.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.ConnectionSecurity != null)
                    hashCode = hashCode * 59 + this.ConnectionSecurity.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
