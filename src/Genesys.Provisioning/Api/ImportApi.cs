/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.813
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Provisioning.Client;
using Genesys.Provisioning.Model;

namespace Genesys.Provisioning.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImportApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get import users status
        /// </summary>
        /// <remarks>
        /// The GET operation will get active importers.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminName">Admin login.</param>
        /// <param name="tenantName">Tenant name.</param>
        /// <returns>GetImportStatusResponse</returns>
        GetImportStatusResponse GetImportStatus (string adminName, string tenantName);

        /// <summary>
        /// Get import users status
        /// </summary>
        /// <remarks>
        /// The GET operation will get active importers.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminName">Admin login.</param>
        /// <param name="tenantName">Tenant name.</param>
        /// <returns>ApiResponse of GetImportStatusResponse</returns>
        ApiResponse<GetImportStatusResponse> GetImportStatusWithHttpInfo (string adminName, string tenantName);
        /// <summary>
        /// Import file
        /// </summary>
        /// <remarks>
        /// The POST operation will import file.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <param name="validateBeforeImport">Validate file before actual import. (optional, default to false)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ImportFile (System.IO.Stream csvfile = null, bool? validateBeforeImport = null);

        /// <summary>
        /// Import file
        /// </summary>
        /// <remarks>
        /// The POST operation will import file.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <param name="validateBeforeImport">Validate file before actual import. (optional, default to false)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ImportFileWithHttpInfo (System.IO.Stream csvfile = null, bool? validateBeforeImport = null);
        /// <summary>
        /// Terminate current import operation
        /// </summary>
        /// <remarks>
        /// The DELETE operation will stop current import..,
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse TerminateImport ();

        /// <summary>
        /// Terminate current import operation
        /// </summary>
        /// <remarks>
        /// The DELETE operation will stop current import..,
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> TerminateImportWithHttpInfo ();
        /// <summary>
        /// Perform import file pre-validation
        /// </summary>
        /// <remarks>
        /// The POST operation validate import file.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ValidateImportFile (System.IO.Stream csvfile = null);

        /// <summary>
        /// Perform import file pre-validation
        /// </summary>
        /// <remarks>
        /// The POST operation validate import file.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ValidateImportFileWithHttpInfo (System.IO.Stream csvfile = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get import users status
        /// </summary>
        /// <remarks>
        /// The GET operation will get active importers.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminName">Admin login.</param>
        /// <param name="tenantName">Tenant name.</param>
        /// <returns>Task of GetImportStatusResponse</returns>
        System.Threading.Tasks.Task<GetImportStatusResponse> GetImportStatusAsync (string adminName, string tenantName);

        /// <summary>
        /// Get import users status
        /// </summary>
        /// <remarks>
        /// The GET operation will get active importers.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminName">Admin login.</param>
        /// <param name="tenantName">Tenant name.</param>
        /// <returns>Task of ApiResponse (GetImportStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetImportStatusResponse>> GetImportStatusAsyncWithHttpInfo (string adminName, string tenantName);
        /// <summary>
        /// Import file
        /// </summary>
        /// <remarks>
        /// The POST operation will import file.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <param name="validateBeforeImport">Validate file before actual import. (optional, default to false)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ImportFileAsync (System.IO.Stream csvfile = null, bool? validateBeforeImport = null);

        /// <summary>
        /// Import file
        /// </summary>
        /// <remarks>
        /// The POST operation will import file.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <param name="validateBeforeImport">Validate file before actual import. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ImportFileAsyncWithHttpInfo (System.IO.Stream csvfile = null, bool? validateBeforeImport = null);
        /// <summary>
        /// Terminate current import operation
        /// </summary>
        /// <remarks>
        /// The DELETE operation will stop current import..,
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> TerminateImportAsync ();

        /// <summary>
        /// Terminate current import operation
        /// </summary>
        /// <remarks>
        /// The DELETE operation will stop current import..,
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> TerminateImportAsyncWithHttpInfo ();
        /// <summary>
        /// Perform import file pre-validation
        /// </summary>
        /// <remarks>
        /// The POST operation validate import file.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ValidateImportFileAsync (System.IO.Stream csvfile = null);

        /// <summary>
        /// Perform import file pre-validation
        /// </summary>
        /// <remarks>
        /// The POST operation validate import file.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ValidateImportFileAsyncWithHttpInfo (System.IO.Stream csvfile = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImportApi : IImportApi
    {
        private Genesys.Provisioning.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImportApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Provisioning.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImportApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Provisioning.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Provisioning.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get import users status The GET operation will get active importers.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminName">Admin login.</param>
        /// <param name="tenantName">Tenant name.</param>
        /// <returns>GetImportStatusResponse</returns>
        public GetImportStatusResponse GetImportStatus (string adminName, string tenantName)
        {
             ApiResponse<GetImportStatusResponse> localVarResponse = GetImportStatusWithHttpInfo(adminName, tenantName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get import users status The GET operation will get active importers.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminName">Admin login.</param>
        /// <param name="tenantName">Tenant name.</param>
        /// <returns>ApiResponse of GetImportStatusResponse</returns>
        public ApiResponse< GetImportStatusResponse > GetImportStatusWithHttpInfo (string adminName, string tenantName)
        {
            // verify the required parameter 'adminName' is set
            if (adminName == null)
                throw new ApiException(400, "Missing required parameter 'adminName' when calling ImportApi->GetImportStatus");
            // verify the required parameter 'tenantName' is set
            if (tenantName == null)
                throw new ApiException(400, "Missing required parameter 'tenantName' when calling ImportApi->GetImportStatus");

            var localVarPath = "/import-users/check-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (adminName != null) localVarQueryParams.Add("adminName", Configuration.ApiClient.ParameterToString(adminName)); // query parameter
            if (tenantName != null) localVarQueryParams.Add("tenantName", Configuration.ApiClient.ParameterToString(tenantName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImportStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetImportStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetImportStatusResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetImportStatusResponse)));
            
        }

        /// <summary>
        /// Get import users status The GET operation will get active importers.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminName">Admin login.</param>
        /// <param name="tenantName">Tenant name.</param>
        /// <returns>Task of GetImportStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetImportStatusResponse> GetImportStatusAsync (string adminName, string tenantName)
        {
             ApiResponse<GetImportStatusResponse> localVarResponse = await GetImportStatusAsyncWithHttpInfo(adminName, tenantName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get import users status The GET operation will get active importers.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminName">Admin login.</param>
        /// <param name="tenantName">Tenant name.</param>
        /// <returns>Task of ApiResponse (GetImportStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetImportStatusResponse>> GetImportStatusAsyncWithHttpInfo (string adminName, string tenantName)
        {
            // verify the required parameter 'adminName' is set
            if (adminName == null)
                throw new ApiException(400, "Missing required parameter 'adminName' when calling ImportApi->GetImportStatus");
            // verify the required parameter 'tenantName' is set
            if (tenantName == null)
                throw new ApiException(400, "Missing required parameter 'tenantName' when calling ImportApi->GetImportStatus");

            var localVarPath = "/import-users/check-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (adminName != null) localVarQueryParams.Add("adminName", Configuration.ApiClient.ParameterToString(adminName)); // query parameter
            if (tenantName != null) localVarQueryParams.Add("tenantName", Configuration.ApiClient.ParameterToString(tenantName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImportStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetImportStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetImportStatusResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetImportStatusResponse)));
            
        }

        /// <summary>
        /// Import file The POST operation will import file.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <param name="validateBeforeImport">Validate file before actual import. (optional, default to false)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ImportFile (System.IO.Stream csvfile = null, bool? validateBeforeImport = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ImportFileWithHttpInfo(csvfile, validateBeforeImport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import file The POST operation will import file.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <param name="validateBeforeImport">Validate file before actual import. (optional, default to false)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ImportFileWithHttpInfo (System.IO.Stream csvfile = null, bool? validateBeforeImport = null)
        {

            var localVarPath = "/import-users/csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (csvfile != null) localVarFileParams.Add("csvfile", Configuration.ApiClient.ParameterToFile("csvfile", csvfile));
            if (validateBeforeImport != null) localVarFormParams.Add("validateBeforeImport", Configuration.ApiClient.ParameterToString(validateBeforeImport)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Import file The POST operation will import file.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <param name="validateBeforeImport">Validate file before actual import. (optional, default to false)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ImportFileAsync (System.IO.Stream csvfile = null, bool? validateBeforeImport = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ImportFileAsyncWithHttpInfo(csvfile, validateBeforeImport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import file The POST operation will import file.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <param name="validateBeforeImport">Validate file before actual import. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ImportFileAsyncWithHttpInfo (System.IO.Stream csvfile = null, bool? validateBeforeImport = null)
        {

            var localVarPath = "/import-users/csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (csvfile != null) localVarFileParams.Add("csvfile", Configuration.ApiClient.ParameterToFile("csvfile", csvfile));
            if (validateBeforeImport != null) localVarFormParams.Add("validateBeforeImport", Configuration.ApiClient.ParameterToString(validateBeforeImport)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Terminate current import operation The DELETE operation will stop current import..,
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse TerminateImport ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = TerminateImportWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate current import operation The DELETE operation will stop current import..,
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > TerminateImportWithHttpInfo ()
        {

            var localVarPath = "/import-users/csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TerminateImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Terminate current import operation The DELETE operation will stop current import..,
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> TerminateImportAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await TerminateImportAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Terminate current import operation The DELETE operation will stop current import..,
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> TerminateImportAsyncWithHttpInfo ()
        {

            var localVarPath = "/import-users/csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TerminateImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Perform import file pre-validation The POST operation validate import file.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ValidateImportFile (System.IO.Stream csvfile = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ValidateImportFileWithHttpInfo(csvfile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform import file pre-validation The POST operation validate import file.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ValidateImportFileWithHttpInfo (System.IO.Stream csvfile = null)
        {

            var localVarPath = "/import-users/validate-csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (csvfile != null) localVarFileParams.Add("csvfile", Configuration.ApiClient.ParameterToFile("csvfile", csvfile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateImportFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Perform import file pre-validation The POST operation validate import file.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ValidateImportFileAsync (System.IO.Stream csvfile = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ValidateImportFileAsyncWithHttpInfo(csvfile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform import file pre-validation The POST operation validate import file.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvfile">CSV/XLS file to import. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ValidateImportFileAsyncWithHttpInfo (System.IO.Stream csvfile = null)
        {

            var localVarPath = "/import-users/validate-csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (csvfile != null) localVarFileParams.Add("csvfile", Configuration.ApiClient.ParameterToFile("csvfile", csvfile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateImportFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

    }
}
