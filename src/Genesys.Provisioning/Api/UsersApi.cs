/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.819
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Provisioning.Client;
using Genesys.Provisioning.Model;

namespace Genesys.Provisioning.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AddUser (AddUserData body);

        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AddUserWithHttpInfo (AddUserData body);
        /// <summary>
        /// Remove user
        /// </summary>
        /// <remarks>
        /// This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="deleteUserData">Delete user data</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteUser (string dbid, DeleteUserData deleteUserData);

        /// <summary>
        /// Remove user
        /// </summary>
        /// <remarks>
        /// This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="deleteUserData">Delete user data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteUserWithHttpInfo (string dbid, DeleteUserData deleteUserData);
        /// <summary>
        /// Get the logged in user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object  of the loggen in user from configuration server
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUsersSuccessResponse</returns>
        GetUsersSuccessResponse GetCurrentUser ();

        /// <summary>
        /// Get the logged in user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object  of the loggen in user from configuration server
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        ApiResponse<GetUsersSuccessResponse> GetCurrentUserWithHttpInfo ();
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object from configuration server
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>GetUsersSuccessResponse</returns>
        GetUsersSuccessResponse GetUser (string dbid);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object from configuration server
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        ApiResponse<GetUsersSuccessResponse> GetUserWithHttpInfo (string dbid);
        /// <summary>
        /// Get skills of users
        /// </summary>
        /// <remarks>
        /// The GET operation will return CfgSkill objects actually linked with existing CfgPerson objects
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUserSkillsSuccessResponse</returns>
        GetUserSkillsSuccessResponse GetUserSkills ();

        /// <summary>
        /// Get skills of users
        /// </summary>
        /// <remarks>
        /// The GET operation will return CfgSkill objects actually linked with existing CfgPerson objects
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUserSkillsSuccessResponse</returns>
        ApiResponse<GetUserSkillsSuccessResponse> GetUserSkillsWithHttpInfo ();
        /// <summary>
        /// Read users
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified wwe roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN,ROLE_SUPERVISOR  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>GetUsersSuccessResponse</returns>
        GetUsersSuccessResponse GetUsers (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);

        /// <summary>
        /// Read users
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified wwe roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN,ROLE_SUPERVISOR  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        ApiResponse<GetUsersSuccessResponse> GetUsersWithHttpInfo (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse UpdateUser (string dbid, UpdateUserData updateUserData);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> UpdateUserWithHttpInfo (string dbid, UpdateUserData updateUserData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AddUserAsync (AddUserData body);

        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddUserAsyncWithHttpInfo (AddUserData body);
        /// <summary>
        /// Remove user
        /// </summary>
        /// <remarks>
        /// This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="deleteUserData">Delete user data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserAsync (string dbid, DeleteUserData deleteUserData);

        /// <summary>
        /// Remove user
        /// </summary>
        /// <remarks>
        /// This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="deleteUserData">Delete user data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserAsyncWithHttpInfo (string dbid, DeleteUserData deleteUserData);
        /// <summary>
        /// Get the logged in user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object  of the loggen in user from configuration server
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        System.Threading.Tasks.Task<GetUsersSuccessResponse> GetCurrentUserAsync ();

        /// <summary>
        /// Get the logged in user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object  of the loggen in user from configuration server
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetCurrentUserAsyncWithHttpInfo ();
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object from configuration server
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        System.Threading.Tasks.Task<GetUsersSuccessResponse> GetUserAsync (string dbid);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object from configuration server
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetUserAsyncWithHttpInfo (string dbid);
        /// <summary>
        /// Get skills of users
        /// </summary>
        /// <remarks>
        /// The GET operation will return CfgSkill objects actually linked with existing CfgPerson objects
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUserSkillsSuccessResponse</returns>
        System.Threading.Tasks.Task<GetUserSkillsSuccessResponse> GetUserSkillsAsync ();

        /// <summary>
        /// Get skills of users
        /// </summary>
        /// <remarks>
        /// The GET operation will return CfgSkill objects actually linked with existing CfgPerson objects
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUserSkillsSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserSkillsSuccessResponse>> GetUserSkillsAsyncWithHttpInfo ();
        /// <summary>
        /// Read users
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified wwe roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN,ROLE_SUPERVISOR  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        System.Threading.Tasks.Task<GetUsersSuccessResponse> GetUsersAsync (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);

        /// <summary>
        /// Read users
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified wwe roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN,ROLE_SUPERVISOR  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetUsersAsyncWithHttpInfo (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> UpdateUserAsync (string dbid, UpdateUserData updateUserData);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </remarks>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateUserAsyncWithHttpInfo (string dbid, UpdateUserData updateUserData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Genesys.Provisioning.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Provisioning.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Provisioning.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Provisioning.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create new user The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AddUser (AddUserData body)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AddUserWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new user The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AddUserWithHttpInfo (AddUserData body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create new user The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AddUserAsync (AddUserData body)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AddUserAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new user The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddUserAsyncWithHttpInfo (AddUserData body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->AddUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove user This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="deleteUserData">Delete user data</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteUser (string dbid, DeleteUserData deleteUserData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteUserWithHttpInfo(dbid, deleteUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="deleteUserData">Delete user data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteUserWithHttpInfo (string dbid, DeleteUserData deleteUserData)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->DeleteUser");
            // verify the required parameter 'deleteUserData' is set
            if (deleteUserData == null)
                throw new ApiException(400, "Missing required parameter 'deleteUserData' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (deleteUserData != null && deleteUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deleteUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove user This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="deleteUserData">Delete user data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserAsync (string dbid, DeleteUserData deleteUserData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteUserAsyncWithHttpInfo(dbid, deleteUserData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove user This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="deleteUserData">Delete user data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserAsyncWithHttpInfo (string dbid, DeleteUserData deleteUserData)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->DeleteUser");
            // verify the required parameter 'deleteUserData' is set
            if (deleteUserData == null)
                throw new ApiException(400, "Missing required parameter 'deleteUserData' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (deleteUserData != null && deleteUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deleteUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the logged in user The GET operation will fetch specified CfgPerson object  of the loggen in user from configuration server
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUsersSuccessResponse</returns>
        public GetUsersSuccessResponse GetCurrentUser ()
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = GetCurrentUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the logged in user The GET operation will fetch specified CfgPerson object  of the loggen in user from configuration server
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        public ApiResponse< GetUsersSuccessResponse > GetCurrentUserWithHttpInfo ()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get the logged in user The GET operation will fetch specified CfgPerson object  of the loggen in user from configuration server
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersSuccessResponse> GetCurrentUserAsync ()
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = await GetCurrentUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the logged in user The GET operation will fetch specified CfgPerson object  of the loggen in user from configuration server
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetCurrentUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get user The GET operation will fetch specified CfgPerson object from configuration server
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>GetUsersSuccessResponse</returns>
        public GetUsersSuccessResponse GetUser (string dbid)
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = GetUserWithHttpInfo(dbid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user The GET operation will fetch specified CfgPerson object from configuration server
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        public ApiResponse< GetUsersSuccessResponse > GetUserWithHttpInfo (string dbid)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->GetUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get user The GET operation will fetch specified CfgPerson object from configuration server
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersSuccessResponse> GetUserAsync (string dbid)
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = await GetUserAsyncWithHttpInfo(dbid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user The GET operation will fetch specified CfgPerson object from configuration server
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetUserAsyncWithHttpInfo (string dbid)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->GetUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Get skills of users The GET operation will return CfgSkill objects actually linked with existing CfgPerson objects
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUserSkillsSuccessResponse</returns>
        public GetUserSkillsSuccessResponse GetUserSkills ()
        {
             ApiResponse<GetUserSkillsSuccessResponse> localVarResponse = GetUserSkillsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get skills of users The GET operation will return CfgSkill objects actually linked with existing CfgPerson objects
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUserSkillsSuccessResponse</returns>
        public ApiResponse< GetUserSkillsSuccessResponse > GetUserSkillsWithHttpInfo ()
        {

            var localVarPath = "/users/skills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSkills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserSkillsSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserSkillsSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserSkillsSuccessResponse)));
        }

        /// <summary>
        /// Get skills of users The GET operation will return CfgSkill objects actually linked with existing CfgPerson objects
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUserSkillsSuccessResponse</returns>
        public async System.Threading.Tasks.Task<GetUserSkillsSuccessResponse> GetUserSkillsAsync ()
        {
             ApiResponse<GetUserSkillsSuccessResponse> localVarResponse = await GetUserSkillsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get skills of users The GET operation will return CfgSkill objects actually linked with existing CfgPerson objects
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUserSkillsSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserSkillsSuccessResponse>> GetUserSkillsAsyncWithHttpInfo ()
        {

            var localVarPath = "/users/skills";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSkills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserSkillsSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserSkillsSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserSkillsSuccessResponse)));
        }

        /// <summary>
        /// Read users The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified wwe roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN,ROLE_SUPERVISOR  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>GetUsersSuccessResponse</returns>
        public GetUsersSuccessResponse GetUsers (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = GetUsersWithHttpInfo(limit, offset, order, sortBy, filterName, filterParameters, roles, skills, userEnabled, userValid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read users The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified wwe roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN,ROLE_SUPERVISOR  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>ApiResponse of GetUsersSuccessResponse</returns>
        public ApiResponse< GetUsersSuccessResponse > GetUsersWithHttpInfo (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filterName", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (filterParameters != null) localVarQueryParams.Add("filterParameters", Configuration.ApiClient.ParameterToString(filterParameters)); // query parameter
            if (roles != null) localVarQueryParams.Add("roles", Configuration.ApiClient.ParameterToString(roles)); // query parameter
            if (skills != null) localVarQueryParams.Add("skills", Configuration.ApiClient.ParameterToString(skills)); // query parameter
            if (userEnabled != null) localVarQueryParams.Add("userEnabled", Configuration.ApiClient.ParameterToString(userEnabled)); // query parameter
            if (userValid != null) localVarQueryParams.Add("userValid", Configuration.ApiClient.ParameterToString(userValid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Read users The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified wwe roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN,ROLE_SUPERVISOR  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>Task of GetUsersSuccessResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersSuccessResponse> GetUsersAsync (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {
             ApiResponse<GetUsersSuccessResponse> localVarResponse = await GetUsersAsyncWithHttpInfo(limit, offset, order, sortBy, filterName, filterParameters, roles, skills, userEnabled, userValid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read users The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified wwe roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN,ROLE_SUPERVISOR  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>Task of ApiResponse (GetUsersSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUsersSuccessResponse>> GetUsersAsyncWithHttpInfo (int? limit = null, int? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filterName", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (filterParameters != null) localVarQueryParams.Add("filterParameters", Configuration.ApiClient.ParameterToString(filterParameters)); // query parameter
            if (roles != null) localVarQueryParams.Add("roles", Configuration.ApiClient.ParameterToString(roles)); // query parameter
            if (skills != null) localVarQueryParams.Add("skills", Configuration.ApiClient.ParameterToString(skills)); // query parameter
            if (userEnabled != null) localVarQueryParams.Add("userEnabled", Configuration.ApiClient.ParameterToString(userEnabled)); // query parameter
            if (userValid != null) localVarQueryParams.Add("userValid", Configuration.ApiClient.ParameterToString(userValid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUsersSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUsersSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUsersSuccessResponse)));
        }

        /// <summary>
        /// Update user This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse UpdateUser (string dbid, UpdateUserData updateUserData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = UpdateUserWithHttpInfo(dbid, updateUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > UpdateUserWithHttpInfo (string dbid, UpdateUserData updateUserData)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UpdateUser");
            // verify the required parameter 'updateUserData' is set
            if (updateUserData == null)
                throw new ApiException(400, "Missing required parameter 'updateUserData' when calling UsersApi->UpdateUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (updateUserData != null && updateUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> UpdateUserAsync (string dbid, UpdateUserData updateUserData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await UpdateUserAsyncWithHttpInfo(dbid, updateUserData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </summary>
        /// <exception cref="Genesys.Provisioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="updateUserData">Update user data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateUserAsyncWithHttpInfo (string dbid, UpdateUserData updateUserData)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UpdateUser");
            // verify the required parameter 'updateUserData' is set
            if (updateUserData == null)
                throw new ApiException(400, "Missing required parameter 'updateUserData' when calling UsersApi->UpdateUser");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (updateUserData != null && updateUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
