/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model.  The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.722
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Genesys.Provisioning.Model
{
    /// <summary>
    /// GetUsersSuccessResponseStatusData
    /// </summary>
    [DataContract]
    public partial class GetUsersSuccessResponseStatusData :  IEquatable<GetUsersSuccessResponseStatusData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUsersSuccessResponseStatusData" /> class.
        /// </summary>
        /// <param name="Users">List of user objects fetched if dbid parameter is absent..</param>
        /// <param name="User">User object fetched if dbid parameter is a person DBID or &#39;me&#39;..</param>
        /// <param name="TotalCount">Total number of users. Available if dbid parameter is absent..</param>
        /// <param name="Skills">skills assigned to any user. Available if dbid parameter is equal to &#39;skills&#39;..</param>
        public GetUsersSuccessResponseStatusData(List<Object> Users = default(List<Object>), Object User = default(Object), int? TotalCount = default(int?), List<GetUsersSuccessResponseStatusDataSkills> Skills = default(List<GetUsersSuccessResponseStatusDataSkills>))
        {
            this.Users = Users;
            this.User = User;
            this.TotalCount = TotalCount;
            this.Skills = Skills;
        }
        
        /// <summary>
        /// List of user objects fetched if dbid parameter is absent.
        /// </summary>
        /// <value>List of user objects fetched if dbid parameter is absent.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<Object> Users { get; set; }
        /// <summary>
        /// User object fetched if dbid parameter is a person DBID or &#39;me&#39;.
        /// </summary>
        /// <value>User object fetched if dbid parameter is a person DBID or &#39;me&#39;.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public Object User { get; set; }
        /// <summary>
        /// Total number of users. Available if dbid parameter is absent.
        /// </summary>
        /// <value>Total number of users. Available if dbid parameter is absent.</value>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public int? TotalCount { get; set; }
        /// <summary>
        /// skills assigned to any user. Available if dbid parameter is equal to &#39;skills&#39;.
        /// </summary>
        /// <value>skills assigned to any user. Available if dbid parameter is equal to &#39;skills&#39;.</value>
        [DataMember(Name="skills", EmitDefaultValue=false)]
        public List<GetUsersSuccessResponseStatusDataSkills> Skills { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUsersSuccessResponseStatusData {\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  Skills: ").Append(Skills).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetUsersSuccessResponseStatusData);
        }

        /// <summary>
        /// Returns true if GetUsersSuccessResponseStatusData instances are equal
        /// </summary>
        /// <param name="other">Instance of GetUsersSuccessResponseStatusData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUsersSuccessResponseStatusData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.TotalCount == other.TotalCount ||
                    this.TotalCount != null &&
                    this.TotalCount.Equals(other.TotalCount)
                ) && 
                (
                    this.Skills == other.Skills ||
                    this.Skills != null &&
                    this.Skills.SequenceEqual(other.Skills)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.TotalCount != null)
                    hash = hash * 59 + this.TotalCount.GetHashCode();
                if (this.Skills != null)
                    hash = hash * 59 + this.Skills.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
