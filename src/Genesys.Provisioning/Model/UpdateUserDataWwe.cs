/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.813
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Genesys.Provisioning.Model
{
    /// <summary>
    /// Properties related to WWE. 
    /// </summary>
    [DataContract]
    public partial class UpdateUserDataWwe :  IEquatable<UpdateUserDataWwe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUserDataWwe" /> class.
        /// </summary>
        /// <param name="DeletedRoles">The roles that will be removed from the user. .</param>
        /// <param name="Roles">The roles that will be added to the user. .</param>
        public UpdateUserDataWwe(List<string> DeletedRoles = default(List<string>), List<string> Roles = default(List<string>))
        {
            this.DeletedRoles = DeletedRoles;
            this.Roles = Roles;
        }
        
        /// <summary>
        /// The roles that will be removed from the user. 
        /// </summary>
        /// <value>The roles that will be removed from the user. </value>
        [DataMember(Name="deletedRoles", EmitDefaultValue=false)]
        public List<string> DeletedRoles { get; set; }
        /// <summary>
        /// The roles that will be added to the user. 
        /// </summary>
        /// <value>The roles that will be added to the user. </value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateUserDataWwe {\n");
            sb.Append("  DeletedRoles: ").Append(DeletedRoles).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdateUserDataWwe);
        }

        /// <summary>
        /// Returns true if UpdateUserDataWwe instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateUserDataWwe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateUserDataWwe other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DeletedRoles == other.DeletedRoles ||
                    this.DeletedRoles != null &&
                    this.DeletedRoles.SequenceEqual(other.DeletedRoles)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DeletedRoles != null)
                    hash = hash * 59 + this.DeletedRoles.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
