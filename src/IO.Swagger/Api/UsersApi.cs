/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model.  The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.423
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object from configuration server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>UsersGetResponseSuccess</returns>
        UsersGetResponseSuccess UserGet (string dbid);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object from configuration server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>ApiResponse of UsersGetResponseSuccess</returns>
        ApiResponse<UsersGetResponseSuccess> UserGetWithHttpInfo (string dbid);
        /// <summary>
        /// Remove user
        /// </summary>
        /// <remarks>
        /// This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <returns>UsersDeleteResponseSuccess</returns>
        UsersDeleteResponseSuccess UsersDelete (string dbid);

        /// <summary>
        /// Remove user
        /// </summary>
        /// <remarks>
        /// This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <returns>ApiResponse of UsersDeleteResponseSuccess</returns>
        ApiResponse<UsersDeleteResponseSuccess> UsersDeleteWithHttpInfo (string dbid);
        /// <summary>
        /// Read users
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>UsersGetResponseSuccess</returns>
        UsersGetResponseSuccess UsersGet (decimal? limit = null, decimal? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);

        /// <summary>
        /// Read users
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>ApiResponse of UsersGetResponseSuccess</returns>
        ApiResponse<UsersGetResponseSuccess> UsersGetWithHttpInfo (decimal? limit = null, decimal? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);
        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>UsersPostResponse</returns>
        UsersPostResponse UsersPost (UsersPost body);

        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiResponse of UsersPostResponse</returns>
        ApiResponse<UsersPostResponse> UsersPostWithHttpInfo (UsersPost body);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="body">Body Data</param>
        /// <returns>UsersPutResponseStatusSuccess</returns>
        UsersPutResponseStatusSuccess UsersPut (string dbid, UsersPut body);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="body">Body Data</param>
        /// <returns>ApiResponse of UsersPutResponseStatusSuccess</returns>
        ApiResponse<UsersPutResponseStatusSuccess> UsersPutWithHttpInfo (string dbid, UsersPut body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object from configuration server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>Task of UsersGetResponseSuccess</returns>
        System.Threading.Tasks.Task<UsersGetResponseSuccess> UserGetAsync (string dbid);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch specified CfgPerson object from configuration server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>Task of ApiResponse (UsersGetResponseSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersGetResponseSuccess>> UserGetAsyncWithHttpInfo (string dbid);
        /// <summary>
        /// Remove user
        /// </summary>
        /// <remarks>
        /// This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <returns>Task of UsersDeleteResponseSuccess</returns>
        System.Threading.Tasks.Task<UsersDeleteResponseSuccess> UsersDeleteAsync (string dbid);

        /// <summary>
        /// Remove user
        /// </summary>
        /// <remarks>
        /// This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <returns>Task of ApiResponse (UsersDeleteResponseSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersDeleteResponseSuccess>> UsersDeleteAsyncWithHttpInfo (string dbid);
        /// <summary>
        /// Read users
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>Task of UsersGetResponseSuccess</returns>
        System.Threading.Tasks.Task<UsersGetResponseSuccess> UsersGetAsync (decimal? limit = null, decimal? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);

        /// <summary>
        /// Read users
        /// </summary>
        /// <remarks>
        /// The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>Task of ApiResponse (UsersGetResponseSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersGetResponseSuccess>> UsersGetAsyncWithHttpInfo (decimal? limit = null, decimal? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null);
        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of UsersPostResponse</returns>
        System.Threading.Tasks.Task<UsersPostResponse> UsersPostAsync (UsersPost body);

        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiResponse (UsersPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersPostResponse>> UsersPostAsyncWithHttpInfo (UsersPost body);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="body">Body Data</param>
        /// <returns>Task of UsersPutResponseStatusSuccess</returns>
        System.Threading.Tasks.Task<UsersPutResponseStatusSuccess> UsersPutAsync (string dbid, UsersPut body);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiResponse (UsersPutResponseStatusSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersPutResponseStatusSuccess>> UsersPutAsyncWithHttpInfo (string dbid, UsersPut body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get user The GET operation will fetch specified CfgPerson object from configuration server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>UsersGetResponseSuccess</returns>
        public UsersGetResponseSuccess UserGet (string dbid)
        {
             ApiResponse<UsersGetResponseSuccess> localVarResponse = UserGetWithHttpInfo(dbid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user The GET operation will fetch specified CfgPerson object from configuration server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>ApiResponse of UsersGetResponseSuccess</returns>
        public ApiResponse< UsersGetResponseSuccess > UserGetWithHttpInfo (string dbid)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UserGet");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersGetResponseSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersGetResponseSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersGetResponseSuccess)));
            
        }

        /// <summary>
        /// Get user The GET operation will fetch specified CfgPerson object from configuration server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>Task of UsersGetResponseSuccess</returns>
        public async System.Threading.Tasks.Task<UsersGetResponseSuccess> UserGetAsync (string dbid)
        {
             ApiResponse<UsersGetResponseSuccess> localVarResponse = await UserGetAsyncWithHttpInfo(dbid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user The GET operation will fetch specified CfgPerson object from configuration server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID or string &#39;me&#39; or &#39;skills&#39;</param>
        /// <returns>Task of ApiResponse (UsersGetResponseSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersGetResponseSuccess>> UserGetAsyncWithHttpInfo (string dbid)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UserGet");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersGetResponseSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersGetResponseSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersGetResponseSuccess)));
            
        }

        /// <summary>
        /// Remove user This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <returns>UsersDeleteResponseSuccess</returns>
        public UsersDeleteResponseSuccess UsersDelete (string dbid)
        {
             ApiResponse<UsersDeleteResponseSuccess> localVarResponse = UsersDeleteWithHttpInfo(dbid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <returns>ApiResponse of UsersDeleteResponseSuccess</returns>
        public ApiResponse< UsersDeleteResponseSuccess > UsersDeleteWithHttpInfo (string dbid)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UsersDelete");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDeleteResponseSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersDeleteResponseSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersDeleteResponseSuccess)));
            
        }

        /// <summary>
        /// Remove user This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <returns>Task of UsersDeleteResponseSuccess</returns>
        public async System.Threading.Tasks.Task<UsersDeleteResponseSuccess> UsersDeleteAsync (string dbid)
        {
             ApiResponse<UsersDeleteResponseSuccess> localVarResponse = await UsersDeleteAsyncWithHttpInfo(dbid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove user This operation will delete the specified CfgPerson and connected with it CfgAgentLogin, CfgPlace, CfgDN objects in configuration server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <returns>Task of ApiResponse (UsersDeleteResponseSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersDeleteResponseSuccess>> UsersDeleteAsyncWithHttpInfo (string dbid)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UsersDelete");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDeleteResponseSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersDeleteResponseSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersDeleteResponseSuccess)));
            
        }

        /// <summary>
        /// Read users The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>UsersGetResponseSuccess</returns>
        public UsersGetResponseSuccess UsersGet (decimal? limit = null, decimal? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {
             ApiResponse<UsersGetResponseSuccess> localVarResponse = UsersGetWithHttpInfo(limit, offset, order, sortBy, filterName, filterParameters, roles, skills, userEnabled, userValid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read users The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>ApiResponse of UsersGetResponseSuccess</returns>
        public ApiResponse< UsersGetResponseSuccess > UsersGetWithHttpInfo (decimal? limit = null, decimal? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filterName", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (filterParameters != null) localVarQueryParams.Add("filterParameters", Configuration.ApiClient.ParameterToString(filterParameters)); // query parameter
            if (roles != null) localVarQueryParams.Add("roles", Configuration.ApiClient.ParameterToString(roles)); // query parameter
            if (skills != null) localVarQueryParams.Add("skills", Configuration.ApiClient.ParameterToString(skills)); // query parameter
            if (userEnabled != null) localVarQueryParams.Add("userEnabled", Configuration.ApiClient.ParameterToString(userEnabled)); // query parameter
            if (userValid != null) localVarQueryParams.Add("userValid", Configuration.ApiClient.ParameterToString(userValid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersGetResponseSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersGetResponseSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersGetResponseSuccess)));
            
        }

        /// <summary>
        /// Read users The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>Task of UsersGetResponseSuccess</returns>
        public async System.Threading.Tasks.Task<UsersGetResponseSuccess> UsersGetAsync (decimal? limit = null, decimal? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {
             ApiResponse<UsersGetResponseSuccess> localVarResponse = await UsersGetAsyncWithHttpInfo(limit, offset, order, sortBy, filterName, filterParameters, roles, skills, userEnabled, userValid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read users The GET operation will fetch CfgPerson objects from configuration server, possible with filters
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit number of users to fetch (optional)</param>
        /// <param name="offset">Skip first N matches (optional)</param>
        /// <param name="order">Sort results ascending/descending (optional)</param>
        /// <param name="sortBy">comma-separated list of fields to sort on, supported: firstName,lastName,userName  (optional)</param>
        /// <param name="filterName">Users filter name (optional)</param>
        /// <param name="filterParameters">Part of users first or last name, if filterName: FirstNameOrLastNameMatches specified.  (optional)</param>
        /// <param name="roles">Only fetch users with specified roles, comma-separated. Supported: ROLE_AGENT,ROLE_ADMIN  (optional)</param>
        /// <param name="skills">Only fetch users with specified skills, comma-separated.  (optional)</param>
        /// <param name="userEnabled">Fetch only enabled or disabled users. (optional)</param>
        /// <param name="userValid">Fetch only valid or invalid users. (optional)</param>
        /// <returns>Task of ApiResponse (UsersGetResponseSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersGetResponseSuccess>> UsersGetAsyncWithHttpInfo (decimal? limit = null, decimal? offset = null, string order = null, string sortBy = null, string filterName = null, string filterParameters = null, string roles = null, string skills = null, bool? userEnabled = null, string userValid = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filterName", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (filterParameters != null) localVarQueryParams.Add("filterParameters", Configuration.ApiClient.ParameterToString(filterParameters)); // query parameter
            if (roles != null) localVarQueryParams.Add("roles", Configuration.ApiClient.ParameterToString(roles)); // query parameter
            if (skills != null) localVarQueryParams.Add("skills", Configuration.ApiClient.ParameterToString(skills)); // query parameter
            if (userEnabled != null) localVarQueryParams.Add("userEnabled", Configuration.ApiClient.ParameterToString(userEnabled)); // query parameter
            if (userValid != null) localVarQueryParams.Add("userValid", Configuration.ApiClient.ParameterToString(userValid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersGetResponseSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersGetResponseSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersGetResponseSuccess)));
            
        }

        /// <summary>
        /// Create new user The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>UsersPostResponse</returns>
        public UsersPostResponse UsersPost (UsersPost body)
        {
             ApiResponse<UsersPostResponse> localVarResponse = UsersPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new user The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>ApiResponse of UsersPostResponse</returns>
        public ApiResponse< UsersPostResponse > UsersPostWithHttpInfo (UsersPost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPost");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersPostResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersPostResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersPostResponse)));
            
        }

        /// <summary>
        /// Create new user The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of UsersPostResponse</returns>
        public async System.Threading.Tasks.Task<UsersPostResponse> UsersPostAsync (UsersPost body)
        {
             ApiResponse<UsersPostResponse> localVarResponse = await UsersPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new user The POST operation will create a new CfgPerson object in configuration server and configure related objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiResponse (UsersPostResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersPostResponse>> UsersPostAsyncWithHttpInfo (UsersPost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPost");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersPostResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersPostResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersPostResponse)));
            
        }

        /// <summary>
        /// Update user This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="body">Body Data</param>
        /// <returns>UsersPutResponseStatusSuccess</returns>
        public UsersPutResponseStatusSuccess UsersPut (string dbid, UsersPut body)
        {
             ApiResponse<UsersPutResponseStatusSuccess> localVarResponse = UsersPutWithHttpInfo(dbid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="body">Body Data</param>
        /// <returns>ApiResponse of UsersPutResponseStatusSuccess</returns>
        public ApiResponse< UsersPutResponseStatusSuccess > UsersPutWithHttpInfo (string dbid, UsersPut body)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UsersPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPut");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersPutResponseStatusSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersPutResponseStatusSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersPutResponseStatusSuccess)));
            
        }

        /// <summary>
        /// Update user This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="body">Body Data</param>
        /// <returns>Task of UsersPutResponseStatusSuccess</returns>
        public async System.Threading.Tasks.Task<UsersPutResponseStatusSuccess> UsersPutAsync (string dbid, UsersPut body)
        {
             ApiResponse<UsersPutResponseStatusSuccess> localVarResponse = await UsersPutAsyncWithHttpInfo(dbid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user This operation will update the specified CfgPerson object in configuration server. Almost the same set of attributes as \&quot;POST\&quot;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbid">User DBID</param>
        /// <param name="body">Body Data</param>
        /// <returns>Task of ApiResponse (UsersPutResponseStatusSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersPutResponseStatusSuccess>> UsersPutAsyncWithHttpInfo (string dbid, UsersPut body)
        {
            // verify the required parameter 'dbid' is set
            if (dbid == null)
                throw new ApiException(400, "Missing required parameter 'dbid' when calling UsersApi->UsersPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPut");

            var localVarPath = "/users/{dbid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dbid != null) localVarPathParams.Add("dbid", Configuration.ApiClient.ParameterToString(dbid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersPutResponseStatusSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersPutResponseStatusSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersPutResponseStatusSuccess)));
            
        }

    }
}
