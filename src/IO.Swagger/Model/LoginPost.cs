/* 
 * Provisioning API
 *
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model.  The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.00.423
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoginPost
    /// </summary>
    [DataContract]
    public partial class LoginPost :  IEquatable<LoginPost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginPost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoginPost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginPost" /> class.
        /// </summary>
        /// <param name="DomainUsername">User unique login in form: domain.com\\login  Effect: Controls the value of the corresponding CfgPerson attribute  (required) (default to &quot;domain.com\login&quot;).</param>
        /// <param name="Password">Password as plain text.  Effect: Controls the value of the corresponding CfgPerson attribute  (required) (default to &quot;password&quot;).</param>
        public LoginPost(string DomainUsername = "domain.com\login", string Password = "password")
        {
            // to ensure "DomainUsername" is required (not null)
            if (DomainUsername == null)
            {
                throw new InvalidDataException("DomainUsername is a required property for LoginPost and cannot be null");
            }
            else
            {
                this.DomainUsername = DomainUsername;
            }
            // to ensure "Password" is required (not null)
            if (Password == null)
            {
                throw new InvalidDataException("Password is a required property for LoginPost and cannot be null");
            }
            else
            {
                this.Password = Password;
            }
        }
        
        /// <summary>
        /// User unique login in form: domain.com\\login  Effect: Controls the value of the corresponding CfgPerson attribute 
        /// </summary>
        /// <value>User unique login in form: domain.com\\login  Effect: Controls the value of the corresponding CfgPerson attribute </value>
        [DataMember(Name="domain_username", EmitDefaultValue=false)]
        public string DomainUsername { get; set; }
        /// <summary>
        /// Password as plain text.  Effect: Controls the value of the corresponding CfgPerson attribute 
        /// </summary>
        /// <value>Password as plain text.  Effect: Controls the value of the corresponding CfgPerson attribute </value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginPost {\n");
            sb.Append("  DomainUsername: ").Append(DomainUsername).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LoginPost);
        }

        /// <summary>
        /// Returns true if LoginPost instances are equal
        /// </summary>
        /// <param name="other">Instance of LoginPost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginPost other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DomainUsername == other.DomainUsername ||
                    this.DomainUsername != null &&
                    this.DomainUsername.Equals(other.DomainUsername)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DomainUsername != null)
                    hash = hash * 59 + this.DomainUsername.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
